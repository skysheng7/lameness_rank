# Add "Average gait score" text aligned with the left side of the color bar
mtext("Average\ngait score", side = 3, line = 1, cex = 3, adj = 0)
}
save_plot_score(elo_baysian_result, paste0("../plots/NV_DW_SB_KI_experts"), gs_record2)
plot_scores <- function(x, gs_record, adjustpar = 4, subset_ids = NULL, include_others = TRUE) {
correct_object <- FALSE
if ("cumwinprobs" %in% names(x)) {
res <- individual_elo_win(x$cumwinprobs, x$ids)
xlab <- "Summed Elo winning probability"
correct_object <- TRUE
}
if ("norm_ds" %in% names(x)) {
res <- x$norm_ds
xlab <- "David's score (normalized)"
correct_object <- TRUE
}
if (!correct_object) {
stop("object 'x' not of correct format")
}
n_ids <- ncol(res)
if (!is.null(subset_ids)) {
colnames(res) <- x$ids
cn_locs <- which(!x$ids %in% subset_ids)
}
# prep data and set axis limits
pdata <- apply(res, 2, density, adjust = adjustpar)
pmax <- max(unlist(lapply(pdata, function(x) max(x$y))))
xl <- c(0, n_ids - 1)
yl <- c(0, pmax * 1.05)
cols <- sapply(colnames(res), function(id) {
record <- gs_record[gs_record$Cow == id, ]
if (nrow(record) == 0) {
return("black")
} else {
value <- record$GS
return(rev(magma(21))[round(((value - 1)/4) * 20) + 1])
}
})
border_cols <- rep("black", n_ids)
if (!is.null(subset_ids)) {
cols[cn_locs] <- NA
if (!include_others) {
border_cols[cn_locs] <- NA
}
}
# Calculate the number of colors needed
num_colors <- 21
color_palette <- rev(magma(num_colors))
# Setup plot layout to accommodate both the main plot and the color bar
layout(matrix(c(1, 2), nrow = 1, byrow = TRUE), widths = c(7,1), heights = c(1))
# Main plot
par(mar = c(6.5, 4, 5, 0) + 0.1) # Adjust right margin to create more white space
# setup
plot(0, 0, type = "n", xlim = c(1, 30), ylim = yl, yaxs = "i",
xaxs = "i", axes = FALSE, xlab = "", ylab = "", bg = "white", xaxt = "n", yaxt = "n") # Turn off automatic axis plotting
# Add x-axis with tick marks
axis(1, at = seq(1, 31, by = 4), cex.axis = 2) # Adjust font size with cex.axis
# Adjust the distance of axis labels
title(ylab = "Density", line = 0.5, cex.lab=4) # Increase font size and adjust distance
title(xlab = xlab, line = 4.5, cex.lab=4) # Increase font size and adjust distance
# draw the filled posteriors
for (i in seq_len(ncol(res))) {
p <- pdata[[i]]
p$x[p$x > (n_ids - 1)] <- n_ids - 1
p$x[p$x < 0] <- 0
polygon(c(p$x, rev(p$x)), c(rep(0, length(p$x)), rev(p$y)),
border = NA, col = cols[i])
}
# draw the contours
for (i in seq_len(ncol(res))) {
p <- pdata[[i]]
p$x[p$x > (n_ids - 1)] <- n_ids - 1
p$x[p$x < 0] <- 0
polygon(c(p$x, rev(p$x)), c(rep(0, length(p$x)), rev(p$y)), border = border_cols[i])
}
# Color bar plot
par(mar = c(5, 0, 7, 8) + 0.1) # Adjust margins for the color bar, more space on the right
# Start the color bar plot, set up its coordinate system but do not draw axes
plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(1, 5), axes = FALSE, xlab = "", ylab = "")
# Draw the color bar
bar_height <- (5 - 1) / num_colors
for (i in 1:num_colors) {
rect(0, 1 + (i - 1) * bar_height, 1, 1 + i * bar_height, col = color_palette[i], border = NA)
}
# Add an axis to the color bar with larger font size
axis(4, at = seq(1, 5, by = 1), labels = seq(1, 5, by = 1), las = 2, cex.axis = 2) # Increased font size
# Add "Average gait score" text aligned with the left side of the color bar
mtext("Average\ngait score", side = 3, line = 1, cex = 3, adj = 0)
}
save_plot_score(elo_baysian_result, paste0("../plots/NV_DW_SB_KI_experts"), gs_record2)
plot_scores <- function(x, gs_record, adjustpar = 4, subset_ids = NULL, include_others = TRUE) {
correct_object <- FALSE
if ("cumwinprobs" %in% names(x)) {
res <- individual_elo_win(x$cumwinprobs, x$ids)
xlab <- "Summed Elo winning probability"
correct_object <- TRUE
}
if ("norm_ds" %in% names(x)) {
res <- x$norm_ds
xlab <- "David's score (normalized)"
correct_object <- TRUE
}
if (!correct_object) {
stop("object 'x' not of correct format")
}
n_ids <- ncol(res)
if (!is.null(subset_ids)) {
colnames(res) <- x$ids
cn_locs <- which(!x$ids %in% subset_ids)
}
# prep data and set axis limits
pdata <- apply(res, 2, density, adjust = adjustpar)
pmax <- max(unlist(lapply(pdata, function(x) max(x$y))))
xl <- c(0, n_ids - 1)
yl <- c(0, pmax * 1.05)
cols <- sapply(colnames(res), function(id) {
record <- gs_record[gs_record$Cow == id, ]
if (nrow(record) == 0) {
return("black")
} else {
value <- record$GS
return(rev(magma(21))[round(((value - 1)/4) * 20) + 1])
}
})
border_cols <- rep("black", n_ids)
if (!is.null(subset_ids)) {
cols[cn_locs] <- NA
if (!include_others) {
border_cols[cn_locs] <- NA
}
}
# Calculate the number of colors needed
num_colors <- 21
color_palette <- rev(magma(num_colors))
# Setup plot layout to accommodate both the main plot and the color bar
layout(matrix(c(1, 2), nrow = 1, byrow = TRUE), widths = c(7,1), heights = c(1))
# Main plot
par(mar = c(6.5, 4, 5, 0) + 0.1) # Adjust right margin to create more white space
# setup
plot(0, 0, type = "n", xlim = c(1, 30), ylim = yl, yaxs = "i",
xaxs = "i", axes = FALSE, xlab = "", ylab = "", bg = "white", xaxt = "n", yaxt = "n") # Turn off automatic axis plotting
# Add x-axis with tick marks
axis(1, at = seq(1, 31, by = 4), cex.axis = 2) # Adjust font size with cex.axis
# Adjust the distance of axis labels
title(ylab = "Density", line = 0.5, cex.lab=4) # Increase font size and adjust distance
title(xlab = xlab, line = 4.5, cex.lab=4) # Increase font size and adjust distance
# draw the filled posteriors
for (i in seq_len(ncol(res))) {
p <- pdata[[i]]
p$x[p$x > (n_ids - 1)] <- n_ids - 1
p$x[p$x < 0] <- 0
polygon(c(p$x, rev(p$x)), c(rep(0, length(p$x)), rev(p$y)),
border = NA, col = cols[i])
}
# draw the contours
for (i in seq_len(ncol(res))) {
p <- pdata[[i]]
p$x[p$x > (n_ids - 1)] <- n_ids - 1
p$x[p$x < 0] <- 0
polygon(c(p$x, rev(p$x)), c(rep(0, length(p$x)), rev(p$y)), border = border_cols[i])
}
# Color bar plot
par(mar = c(5, 0, 7, 9) + 0.1) # Adjust margins for the color bar, more space on the right
# Start the color bar plot, set up its coordinate system but do not draw axes
plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(1, 5), axes = FALSE, xlab = "", ylab = "")
# Draw the color bar
bar_height <- (5 - 1) / num_colors
for (i in 1:num_colors) {
rect(0, 1 + (i - 1) * bar_height, 1, 1 + i * bar_height, col = color_palette[i], border = NA)
}
# Add an axis to the color bar with larger font size
axis(4, at = seq(1, 5, by = 1), labels = seq(1, 5, by = 1), las = 2, cex.axis = 2) # Increased font size
# Add "Average gait score" text aligned with the left side of the color bar
mtext("Average\ngait score", side = 3, line = 1, cex = 3, adj = 0)
}
save_plot_score(elo_baysian_result, paste0("../plots/NV_DW_SB_KI_experts"), gs_record2)
plot_scores <- function(x, gs_record, adjustpar = 4, subset_ids = NULL, include_others = TRUE) {
correct_object <- FALSE
if ("cumwinprobs" %in% names(x)) {
res <- individual_elo_win(x$cumwinprobs, x$ids)
xlab <- "Summed Elo winning probability"
correct_object <- TRUE
}
if ("norm_ds" %in% names(x)) {
res <- x$norm_ds
xlab <- "David's score (normalized)"
correct_object <- TRUE
}
if (!correct_object) {
stop("object 'x' not of correct format")
}
n_ids <- ncol(res)
if (!is.null(subset_ids)) {
colnames(res) <- x$ids
cn_locs <- which(!x$ids %in% subset_ids)
}
# prep data and set axis limits
pdata <- apply(res, 2, density, adjust = adjustpar)
pmax <- max(unlist(lapply(pdata, function(x) max(x$y))))
xl <- c(0, n_ids - 1)
yl <- c(0, pmax * 1.05)
cols <- sapply(colnames(res), function(id) {
record <- gs_record[gs_record$Cow == id, ]
if (nrow(record) == 0) {
return("black")
} else {
value <- record$GS
return(rev(magma(21))[round(((value - 1)/4) * 20) + 1])
}
})
border_cols <- rep("black", n_ids)
if (!is.null(subset_ids)) {
cols[cn_locs] <- NA
if (!include_others) {
border_cols[cn_locs] <- NA
}
}
# Calculate the number of colors needed
num_colors <- 21
color_palette <- rev(magma(num_colors))
# Setup plot layout to accommodate both the main plot and the color bar
layout(matrix(c(1, 2), nrow = 1, byrow = TRUE), widths = c(7,1), heights = c(1))
# Main plot
par(mar = c(6.5, 4, 5, 0) + 0.1) # Adjust right margin to create more white space
# setup
plot(0, 0, type = "n", xlim = c(1, 30), ylim = yl, yaxs = "i",
xaxs = "i", axes = FALSE, xlab = "", ylab = "", bg = "white", xaxt = "n", yaxt = "n") # Turn off automatic axis plotting
# Add x-axis with tick marks
axis(1, at = seq(1, 31, by = 4), cex.axis = 2) # Adjust font size with cex.axis
# Adjust the distance of axis labels
title(ylab = "Density", line = 0.5, cex.lab=4) # Increase font size and adjust distance
title(xlab = xlab, line = 4.5, cex.lab=4) # Increase font size and adjust distance
# draw the filled posteriors
for (i in seq_len(ncol(res))) {
p <- pdata[[i]]
p$x[p$x > (n_ids - 1)] <- n_ids - 1
p$x[p$x < 0] <- 0
polygon(c(p$x, rev(p$x)), c(rep(0, length(p$x)), rev(p$y)),
border = NA, col = cols[i])
}
# draw the contours
for (i in seq_len(ncol(res))) {
p <- pdata[[i]]
p$x[p$x > (n_ids - 1)] <- n_ids - 1
p$x[p$x < 0] <- 0
polygon(c(p$x, rev(p$x)), c(rep(0, length(p$x)), rev(p$y)), border = border_cols[i])
}
# Color bar plot
par(mar = c(5, 0, 7, 8) + 0.1) # Adjust margins for the color bar, more space on the right
# Start the color bar plot, set up its coordinate system but do not draw axes
plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(1, 5), axes = FALSE, xlab = "", ylab = "")
# Draw the color bar
bar_height <- (5 - 1) / num_colors
for (i in 1:num_colors) {
rect(0, 1 + (i - 1) * bar_height, 1, 1 + i * bar_height, col = color_palette[i], border = NA)
}
# Add an axis to the color bar with larger font size
axis(4, at = seq(1, 5, by = 1), labels = seq(1, 5, by = 1), las = 2, cex.axis = 2) # Increased font size
# Add "Average gait score" text aligned with the left side of the color bar
mtext("Average\ngait score", side = 3, line = 1, cex = 2, adj = 0)
}
save_plot_score(elo_baysian_result, paste0("../plots/NV_DW_SB_KI_experts"), gs_record2)
plot_scores <- function(x, gs_record, adjustpar = 4, subset_ids = NULL, include_others = TRUE) {
correct_object <- FALSE
if ("cumwinprobs" %in% names(x)) {
res <- individual_elo_win(x$cumwinprobs, x$ids)
xlab <- "Summed Elo winning probability"
correct_object <- TRUE
}
if ("norm_ds" %in% names(x)) {
res <- x$norm_ds
xlab <- "David's score (normalized)"
correct_object <- TRUE
}
if (!correct_object) {
stop("object 'x' not of correct format")
}
n_ids <- ncol(res)
if (!is.null(subset_ids)) {
colnames(res) <- x$ids
cn_locs <- which(!x$ids %in% subset_ids)
}
# prep data and set axis limits
pdata <- apply(res, 2, density, adjust = adjustpar)
pmax <- max(unlist(lapply(pdata, function(x) max(x$y))))
xl <- c(0, n_ids - 1)
yl <- c(0, pmax * 1.05)
cols <- sapply(colnames(res), function(id) {
record <- gs_record[gs_record$Cow == id, ]
if (nrow(record) == 0) {
return("black")
} else {
value <- record$GS
return(rev(magma(21))[round(((value - 1)/4) * 20) + 1])
}
})
border_cols <- rep("black", n_ids)
if (!is.null(subset_ids)) {
cols[cn_locs] <- NA
if (!include_others) {
border_cols[cn_locs] <- NA
}
}
# Calculate the number of colors needed
num_colors <- 21
color_palette <- rev(magma(num_colors))
# Setup plot layout to accommodate both the main plot and the color bar
layout(matrix(c(1, 2), nrow = 1, byrow = TRUE), widths = c(7,1), heights = c(1))
# Main plot
par(mar = c(6.5, 4, 5, 0) + 0.1) # Adjust right margin to create more white space
# setup
plot(0, 0, type = "n", xlim = c(1, 30), ylim = yl, yaxs = "i",
xaxs = "i", axes = FALSE, xlab = "", ylab = "", bg = "white", xaxt = "n", yaxt = "n") # Turn off automatic axis plotting
# Add x-axis with tick marks
axis(1, at = seq(1, 31, by = 4), cex.axis = 2) # Adjust font size with cex.axis
# Adjust the distance of axis labels
title(ylab = "Density", line = 0.5, cex.lab=4) # Increase font size and adjust distance
title(xlab = xlab, line = 4.5, cex.lab=4) # Increase font size and adjust distance
# draw the filled posteriors
for (i in seq_len(ncol(res))) {
p <- pdata[[i]]
p$x[p$x > (n_ids - 1)] <- n_ids - 1
p$x[p$x < 0] <- 0
polygon(c(p$x, rev(p$x)), c(rep(0, length(p$x)), rev(p$y)),
border = NA, col = cols[i])
}
# draw the contours
for (i in seq_len(ncol(res))) {
p <- pdata[[i]]
p$x[p$x > (n_ids - 1)] <- n_ids - 1
p$x[p$x < 0] <- 0
polygon(c(p$x, rev(p$x)), c(rep(0, length(p$x)), rev(p$y)), border = border_cols[i])
}
# Color bar plot
par(mar = c(5, 0, 7, 8) + 0.1) # Adjust margins for the color bar, more space on the right
# Start the color bar plot, set up its coordinate system but do not draw axes
plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(1, 5), axes = FALSE, xlab = "", ylab = "")
# Draw the color bar
bar_height <- (5 - 1) / num_colors
for (i in 1:num_colors) {
rect(0, 1 + (i - 1) * bar_height, 1, 1 + i * bar_height, col = color_palette[i], border = NA)
}
# Add an axis to the color bar with larger font size
axis(4, at = seq(1, 5, by = 1), labels = seq(1, 5, by = 1), las = 2, cex.axis = 2) # Increased font size
# Add "Average gait score" text aligned with the left side of the color bar
mtext("Average\ngait score", side = 3, line = 1, cex = 2.6, adj = 0)
}
save_plot_score(elo_baysian_result, paste0("../plots/NV_DW_SB_KI_experts"), gs_record2)
library(EloRating)
library(EloSteepness)
library(RColorBrewer)
library(dplyr)
library(irr)
library(gridExtra)
library(grid)
library(ggplot2)
source("eloSteepness_helpers.R")
# load in the data
# all 55 HITs' response
click_worker_dir <- "../../07-Amazon_MTurk_click_worker_response_30cow_pairwise/results/"
winner_loser <- read.csv(paste0(click_worker_dir, "winner_loser_55HITs.csv"), header = TRUE, sep = ",")
cowLR <- read.csv(paste0(click_worker_dir,"cowLR_response_clickWorker_55HITS.csv"), header = TRUE, sep = ",")
# each of the 55 HITs have the same number of workers
winner_loser_sampled <- read.csv(paste0(click_worker_dir,"winner_loser_sampled_55HITs.csv"), header = TRUE, sep = ",")
cowLR_sampled <- read.csv(paste0(click_worker_dir,"cowLR_response_clickWorker_sampled_55HITS.csv"), header = TRUE, sep = ",")
# 55 HITs: delete all responses between the 2 cows if average click worker response is (-1, 1)
winner_loser_sampled_delete <- read.csv(paste0(click_worker_dir,"winner_loser_sampled_delete_pairs_55HITs.csv"), header = TRUE, sep = ",")
# 55 HITs: if average click worker response is between (-1, 1) create
# min_worker_num/2 A wins B, min_worker_num/2 B wins A
winner_loser_sampled_exchannge0 <- read.csv(paste0(click_worker_dir,"winner_loser_sampled_exchange0_55HITs.csv"), header = TRUE, sep = ",")
# 55 HITs: if average click worker response is between (-1, 1) create
# min_worker_num/2 A wins B, min_worker_num/2 B wins A
winner_loser_sampled_ind_exchannge0 <- read.csv(paste0(click_worker_dir,"winner_loser_sampled_ind_exchange0_55HITs.csv"), header = TRUE, sep = ",")
# 5 milestone cows: min number of comparisons
winner_loser_milestone_min <- read.csv(paste0(click_worker_dir,'winner_loser_milestone_min_55HITs.csv'), header = TRUE, sep = ",")
# 5 milestone cows: maximum number of comparisons
winner_loser_milestone_max <- read.csv(paste0(click_worker_dir,'winner_loser_milestone_max_55HITs.csv'), header = TRUE, sep = ",")
# 12 rounds of expert traditional gait score
expert_gs_dir <- "../../03-30cow_GS_label_expert_response/results/"
gs_record <- read.csv(paste0(expert_gs_dir, "gs_response_combined_avg.csv"), header = TRUE, sep = ",")
gs_record2 <- gs_record[, c("Cow", "GS")]
# load experts' eloSteepness results
expert_elo_dir <-"../results/"
expert_eloSteep <- read.csv(paste0(expert_elo_dir, "compare_summary.csv"), header = TRUE, sep = ",")
expert_eloSteep$X <- NULL
output_dir <- "../results/"
click_worker_experts <- read.csv("../results/compare_summary.csv", header = TRUE)
library(EloRating)
library(EloSteepness)
library(RColorBrewer)
library(irr)
library(viridis)
library(tidyverse)
library(ggforce)
source("eloSteepness_helpers.R")
# load in the data
expert_dir <- "../../05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts/"
winner_loser <- read.csv(paste0(expert_dir, "winner_loser_merged_DW_NV_SB_TM_KI.csv"), header = TRUE, sep = ",")
winner_loser_no_slip <- winner_loser[-which((winner_loser$winner %in% c(4035)) | (winner_loser$loser %in% c(4035))),]
expert_gs_dir <- "../../03-30cow_GS_label_expert_response/results/"
gs_record <- read.csv(paste0(expert_gs_dir, "gs_response_combined_avg.csv"), header = TRUE, sep = ",")
gs_record2 <- gs_record[, c("Cow", "GS")]
output_dir <- "../results/"
#click_worker_experts <- read.csv(paste0(output_dir, "compare_summary.csv"), header = TRUE, sep = ",")
# replicate row is degree > 1
winner_loser_degree_replct <- replicate_row_df(winner_loser)
################################################################################
############# handle tie by duplicate row and flip winner loser#################
################################################################################
# handle ties: duplicate the rows where degree = 0, 1 row: A wins over B, 2nd row: B wins over A
winn_loser_processed <- swap_winner_loser(winner_loser, FALSE)
click_worker_experts <- read.csv(paste0(output_dir, "compare_summary.csv"), header = TRUE, sep = ",")
################################################################################
## ICC for interobserver reliability of lameness hierarchy generated by ########
############################# different experts ################################
################################################################################
expert_compare <- click_worker_experts[, c("Cow", "DW_experts_mean", "NV_experts_mean", "SB_experts_mean", "KI_experts_mean")]
expert_compare_process <- expert_compare[, 2:ncol(expert_compare)]
expert_compare_icc_value <- icc(expert_compare_process, model = "twoway", type = "agreement", unit = "single")$"value"
expert_compare_icc_value
################################################################################
## Agreement between lameness hierarchy generated by all experts and average####
############################### gait scores ####################################
################################################################################
gs_expert_compare <- click_worker_experts[, c("Cow", "GS", "NV_DW_SB_KI_experts_mean")]
# Calculate Spearman rank correlation
correlation <- cor(gs_expert_compare$GS, gs_expert_compare$NV_DW_SB_KI_experts_mean, method="spearman")
# Print the result
print(correlation)
cor(gs_expert_compare$GS, gs_expert_compare$NV_DW_SB_KI_experts_mean, method="spearman")
# Calculate Spearman rank correlation using cor.test
cor_test_result <- cor.test(gs_expert_compare$GS, gs_expert_compare$NV_DW_SB_KI_experts_mean, method = "spearman")
# Print the result
print(cor_test_result)
# If you want to extract and print just the correlation coefficient and the p-value
correlation_coefficient <- cor_test_result$estimate
p_value <- cor_test_result$p.value
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("P-value:", p_value, "\n")
# calculate the ICC between experts and click worker for lameness hierarchy
expert_worker_compare <- click_worker_experts[, c("Cow", "all_click_worker_mean", "NV_DW_SB_KI_experts_mean")]
expert_worker_compare_process <- expert_worker_compare[, 2:ncol(expert_worker_compare)]
expert_worker_compare_icc_value <- icc(expert_worker_compare_process, model = "twoway", type = "agreement", unit = "single")$"value"
expert_worker_compare_icc_value
# plot to compare the summed elo winning probability from experts and from crowd workers
# prepare dataset
load("../results/large files/all_click_worker_elo_baysian.rdata")
worker_basyeian <- elo_baysian_result
worker_score <- scores(worker_basyeian)
worker_score<- worker_score[, c("id", "mean", "q045", "q955")]
names(worker_score) <- c("id", "worker_mean", "worker_q045", "worker_q955")
load("../results/large files/NV_DW_SB_KI_experts_elo_baysian.rdata")
expt_basyeian <- elo_baysian_result
expt_score <- scores(expt_basyeian)
expt_score<- expt_score[, c("id", "mean", "q045", "q955")]
names(expt_score) <- c("id", "expert_mean", "expert_q045", "expert_q955")
# merge the worker and expert summed Elo winning probability
worker_expt_sum <- merge(worker_score, expt_score)
# Create the plot
elo_plot <- ggplot(worker_expt_sum, aes(x = expert_mean, y = worker_mean)) +
geom_point(aes(color = id), alpha = 0.9) +
geom_ellipse(aes(x0 = (expert_q045 + expert_q955) / 2,
y0 = (worker_q045 + worker_q955) / 2,
a = (expert_q955 - expert_q045) / 2,
b = (worker_q955 - worker_q045) / 2,
angle = 0,
fill = id), alpha = 0.3, color = NA)  +
labs(
x = "Summed Elo winning probability \nfrom experienced assessors",
y = "Summed Elo winning \nprobability from crowd workers"
) +
guides(
color = "none",  # hide the color legend
fill = "none"    # hide the fill legend
) +
theme_classic() +
theme(
text = element_text(size = 35),
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25)
) +
scale_x_continuous(limits = c(1, 30)) +
scale_y_continuous(limits = c(1, 30))
# Save the plot
ggsave("../plots/expert_crowd_worker_hiearchy_compare_NV_DW_SB_KI.png", plot = elo_plot, width = 10, height = 8, limitsize = FALSE)
# Create the plot
elo_plot <- ggplot(worker_expt_sum, aes(x = expert_mean, y = worker_mean)) +
geom_point(aes(color = id), alpha = 0.9) +
geom_ellipse(aes(x0 = (expert_q045 + expert_q955) / 2,
y0 = (worker_q045 + worker_q955) / 2,
a = (expert_q955 - expert_q045) / 2,
b = (worker_q955 - worker_q045) / 2,
angle = 0,
fill = id), alpha = 0.3, color = NA)  +
labs(
x = "Summed Elo winning probability \nfrom experienced assessors",
y = "Summed Elo winning \nprobability from crowd workers"
) +
guides(
color = "none",  # hide the color legend
fill = "none"    # hide the fill legend
) +
theme_classic() +
theme(
text = element_text(size = 30),
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25)
) +
scale_x_continuous(limits = c(1, 30)) +
scale_y_continuous(limits = c(1, 30))
# Save the plot
ggsave("../plots/expert_crowd_worker_hiearchy_compare_NV_DW_SB_KI.png", plot = elo_plot, width = 10, height = 8, limitsize = FALSE)

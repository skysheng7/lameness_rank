x = num_of_crowd_worker,
ymin = num_of_comparison_cor_mean - num_of_comparison_cor_SE,
ymax = num_of_comparison_cor_mean + num_of_comparison_cor_SE,
width = 0.2
)
) +
labs(
x = "Number of crowd workers",
#y = "ICC between subsampled and \ncomplete responses from \nexperienced assessors"
y = "Count"
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(70, 120), expand = expansion(mult = c(0, 0.1)))+
ggtitle("(C) Number of comparisons used") +
theme(plot.title = element_text(size = 40, hjust = 0, vjust = 0.5))+
theme(plot.margin = margin(t = 0.2, r = 1, b = 0.5, l = 1, unit = "cm"))
# Define the margin
margin = theme(plot.margin = unit(c(0.5, 0.1, 0.1, 0.1), "inches"))
# Vertically stack Plot A, Plot B, and Plot C
combined_plot <- grid.arrange(plot_A, plot_B, plot_C, nrow = 3)
# Adjust the main title space as needed
combined_plot_with_title <- grid.arrange(
grobs = list(
textGrob("Subsampling with 5 Milestone Cows",
gp = gpar(fontsize = 60, fontface = "bold"),
hjust = 0.5),
combined_plot
),
ncol = 1,
heights = c(1, 9) # Adjust heights as needed
)
# Save the combined plot
ggsave("../plots/combined_plot_vertical.png", plot = combined_plot_with_title, width = 15, height = 30, limitsize = FALSE)
# Define the margin
margin = theme(plot.margin = unit(c(0.5, 0.1, 0.5, 0.1), "inches"))
# Vertically stack Plot A, Plot B, and Plot C
combined_plot <- grid.arrange(plot_A, plot_B, plot_C, nrow = 3)
# Adjust the main title space as needed
combined_plot_with_title <- grid.arrange(
grobs = list(
textGrob("Subsampling with 5 Milestone Cows",
gp = gpar(fontsize = 60, fontface = "bold"),
hjust = 0.5),
combined_plot
),
ncol = 1,
heights = c(1, 9) # Adjust heights as needed
)
# Save the combined plot
ggsave("../plots/combined_plot_vertical.png", plot = combined_plot_with_title, width = 15, height = 30, limitsize = FALSE)
# Define the margin
margin = theme(plot.margin = unit(c(0.5, 0.1, 1, 0.1), "inches"))
# Vertically stack Plot A, Plot B, and Plot C
combined_plot <- grid.arrange(plot_A, plot_B, plot_C, nrow = 3)
# Adjust the main title space as needed
combined_plot_with_title <- grid.arrange(
grobs = list(
textGrob("Subsampling with 5 Milestone Cows",
gp = gpar(fontsize = 60, fontface = "bold"),
hjust = 0.5),
combined_plot
),
ncol = 1,
heights = c(1, 9) # Adjust heights as needed
)
# Save the combined plot
ggsave("../plots/combined_plot_vertical.png", plot = combined_plot_with_title, width = 15, height = 30, limitsize = FALSE)
# Define the margin
margin = theme(plot.margin = unit(c(1, 0.1, 1, 0.1), "inches"))
# Vertically stack Plot A, Plot B, and Plot C
combined_plot <- grid.arrange(plot_A, plot_B, plot_C, nrow = 3)
# Adjust the main title space as needed
combined_plot_with_title <- grid.arrange(
grobs = list(
textGrob("Subsampling with 5 Milestone Cows",
gp = gpar(fontsize = 60, fontface = "bold"),
hjust = 0.5),
combined_plot
),
ncol = 1,
heights = c(1, 9) # Adjust heights as needed
)
# Save the combined plot
ggsave("../plots/combined_plot_vertical.png", plot = combined_plot_with_title, width = 15, height = 30, limitsize = FALSE)
# Define the margin
margin = theme(plot.margin = unit(c(1, 0.1, 2, 0.1), "inches"))
# Vertically stack Plot A, Plot B, and Plot C
combined_plot <- grid.arrange(plot_A, plot_B, plot_C, nrow = 3)
# Adjust the main title space as needed
combined_plot_with_title <- grid.arrange(
grobs = list(
textGrob("Subsampling with 5 Milestone Cows",
gp = gpar(fontsize = 60, fontface = "bold"),
hjust = 0.5),
combined_plot
),
ncol = 1,
heights = c(1, 9) # Adjust heights as needed
)
# Save the combined plot
ggsave("../plots/combined_plot_vertical.png", plot = combined_plot_with_title, width = 15, height = 30, limitsize = FALSE)
# Plot A
plot_A <- ggplot(correlation_change_df_sum, aes(x = num_of_crowd_worker, y = spearman_subsample_with_full_worker)) +
geom_point(color = "lightblue", alpha = 0.5, size = 10) +
geom_point(aes(y = spearman_subsample_with_full_worker_cor_mean), color = "dodgerblue", size = 15) +
geom_errorbar(aes(
x = num_of_crowd_worker,
ymin = spearman_subsample_with_full_worker_ymin,
ymax = spearman_subsample_with_full_worker_ymax,
width = 0.2
)
) +
labs(
x = "Number of crowd workers",
y = expression(r[s])
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1))) +
ggtitle("(A) Subsampled VS All Crowd Worker Hierarchies") +
theme(plot.title = element_text(size = 40, hjust = 0, vjust = 0.5))+
theme(plot.margin = margin(t = 0.5, r = 1, b = 0.5, l = 1, unit = "cm")) +
theme(
axis.title.x = element_blank(), # Remove x-axis title
axis.text.x = element_blank(),  # Remove x-axis text
axis.ticks.x = element_blank()  # Remove x-axis ticks
)
# Plot B
plot_B <- ggplot(correlation_change_df_sum, aes(x = num_of_crowd_worker, y = icc_subsample_with_full_expert)) +
geom_point(color = "lightblue", alpha = 0.5, size = 10) +
geom_point(aes(y = icc_subsample_with_full_expert_cor_mean), color = "dodgerblue", size = 15) +
geom_errorbar(aes(
x = num_of_crowd_worker,
ymin = icc_subsample_with_full_expert_cor_mean - icc_subsample_with_full_expert_cor_SE,
ymax = icc_subsample_with_full_expert_cor_mean + icc_subsample_with_full_expert_cor_SE,
width = 0.2
)
) +
labs(
x = "Number of crowd workers",
y = "ICC"
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))+
ggtitle("(B) Subsampled Workers VS All Experienced \nAssessor Hierarchies") +
theme(plot.title = element_text(size = 40, hjust = 0, vjust = 0.5))+
theme(plot.margin = margin(t = 0.5, r = 1, b = 0.5, l = 1, unit = "cm")) +
theme(
axis.title.x = element_blank(), # Remove x-axis title
axis.text.x = element_blank(),  # Remove x-axis text
axis.ticks.x = element_blank()  # Remove x-axis ticks
)
# Plot C
plot_C <- ggplot(correlation_change_df_sum, aes(x = num_of_crowd_worker, y = num_of_comparison)) +
geom_point(color = "lightblue", alpha = 0.5, size = 10) +
geom_point(aes(y = num_of_comparison_cor_mean), color = "dodgerblue", size = 15) +
geom_errorbar(aes(
x = num_of_crowd_worker,
ymin = num_of_comparison_cor_mean - num_of_comparison_cor_SE,
ymax = num_of_comparison_cor_mean + num_of_comparison_cor_SE,
width = 0.2
)
) +
labs(
x = "Number of crowd workers",
#y = "ICC between subsampled and \ncomplete responses from \nexperienced assessors"
y = "Count"
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(70, 120), expand = expansion(mult = c(0, 0.1)))+
ggtitle("(C) Number of comparisons used") +
theme(plot.title = element_text(size = 40, hjust = 0, vjust = 0.5))+
theme(plot.margin = margin(t = 0.5, r = 1, b = 0.5, l = 1, unit = "cm"))
# Vertically stack Plot A, Plot B, and Plot C
combined_plot <- grid.arrange(plot_A, plot_B, plot_C, nrow = 3)
# Adjust the main title space as needed
combined_plot_with_title <- grid.arrange(
grobs = list(
textGrob("Subsampling with 5 Milestone Cows",
gp = gpar(fontsize = 60, fontface = "bold"),
hjust = 0.5),
combined_plot
),
ncol = 1,
heights = c(1, 9) # Adjust heights as needed
)
# Save the combined plot
ggsave("../plots/combined_plot_vertical.png", plot = combined_plot_with_title, width = 15, height = 30, limitsize = FALSE)
# Plot A
plot_A <- ggplot(correlation_change_df_sum, aes(x = num_of_crowd_worker, y = spearman_subsample_with_full_worker)) +
geom_point(color = "lightblue", alpha = 0.5, size = 10) +
geom_point(aes(y = spearman_subsample_with_full_worker_cor_mean), color = "dodgerblue", size = 15) +
geom_errorbar(aes(
x = num_of_crowd_worker,
ymin = spearman_subsample_with_full_worker_ymin,
ymax = spearman_subsample_with_full_worker_ymax,
width = 0.2
)
) +
labs(
x = "Number of crowd workers",
y = expression(r[s])
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1))) +
ggtitle("(A) Subsampled VS All Crowd Worker Hierarchies") +
theme(plot.title = element_text(size = 40, hjust = 0, vjust = 0.5))+
theme(plot.margin = margin(t = 0.5, r = 1, b = 1, l = 1, unit = "cm")) +
theme(
axis.title.x = element_blank(), # Remove x-axis title
axis.text.x = element_blank(),  # Remove x-axis text
axis.ticks.x = element_blank()  # Remove x-axis ticks
)
# Plot B
plot_B <- ggplot(correlation_change_df_sum, aes(x = num_of_crowd_worker, y = icc_subsample_with_full_expert)) +
geom_point(color = "lightblue", alpha = 0.5, size = 10) +
geom_point(aes(y = icc_subsample_with_full_expert_cor_mean), color = "dodgerblue", size = 15) +
geom_errorbar(aes(
x = num_of_crowd_worker,
ymin = icc_subsample_with_full_expert_cor_mean - icc_subsample_with_full_expert_cor_SE,
ymax = icc_subsample_with_full_expert_cor_mean + icc_subsample_with_full_expert_cor_SE,
width = 0.2
)
) +
labs(
x = "Number of crowd workers",
y = "ICC"
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))+
ggtitle("(B) Subsampled Workers VS All Experienced \nAssessor Hierarchies") +
theme(plot.title = element_text(size = 40, hjust = 0, vjust = 0.5))+
theme(plot.margin = margin(t = 0.5, r = 1, b = 1, l = 1, unit = "cm")) +
theme(
axis.title.x = element_blank(), # Remove x-axis title
axis.text.x = element_blank(),  # Remove x-axis text
axis.ticks.x = element_blank()  # Remove x-axis ticks
)
# Plot C
plot_C <- ggplot(correlation_change_df_sum, aes(x = num_of_crowd_worker, y = num_of_comparison)) +
geom_point(color = "lightblue", alpha = 0.5, size = 10) +
geom_point(aes(y = num_of_comparison_cor_mean), color = "dodgerblue", size = 15) +
geom_errorbar(aes(
x = num_of_crowd_worker,
ymin = num_of_comparison_cor_mean - num_of_comparison_cor_SE,
ymax = num_of_comparison_cor_mean + num_of_comparison_cor_SE,
width = 0.2
)
) +
labs(
x = "Number of crowd workers",
#y = "ICC between subsampled and \ncomplete responses from \nexperienced assessors"
y = "Count"
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(70, 120), expand = expansion(mult = c(0, 0.1)))+
ggtitle("(C) Number of comparisons used") +
theme(plot.title = element_text(size = 40, hjust = 0, vjust = 0.5))+
theme(plot.margin = margin(t = 0.5, r = 1, b = 1, l = 1, unit = "cm"))
# Vertically stack Plot A, Plot B, and Plot C
combined_plot <- grid.arrange(plot_A, plot_B, plot_C, nrow = 3)
# Adjust the main title space as needed
combined_plot_with_title <- grid.arrange(
grobs = list(
textGrob("Subsampling with 5 Milestone Cows",
gp = gpar(fontsize = 60, fontface = "bold"),
hjust = 0.5),
combined_plot
),
ncol = 1,
heights = c(1, 9) # Adjust heights as needed
)
# Save the combined plot
ggsave("../plots/combined_plot_vertical.png", plot = combined_plot_with_title, width = 15, height = 30, limitsize = FALSE)
View(correlation_change_df_sum)
(435-118)/435
# load packages
library(ggplot2)
library(lubridate)
library(pdftools)
library("plyr")
library(tidyverse)
library(irr)
library(corrplot)
library(clValid)
library(gridExtra)
library(grid)
source("55HIT_easy_hard_question_assess_helpers.R")
setwd("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/07-Amazon_MTurk_click_worker_response_30cow_pairwise/code")
# load packages
library(ggplot2)
library(lubridate)
library(pdftools)
library("plyr")
library(tidyverse)
library(irr)
library(corrplot)
library(clValid)
library(gridExtra)
library(grid)
source("55HIT_easy_hard_question_assess_helpers.R")
################################################################################
################################ Load Data #####################################
################################################################################
input_dir <- "../results"
answer_dir <- "../../05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts"
output_dir <- "../results"
# read in the worker response data
cowLR_response <- read.csv("../results/cowLR_response_clickWorker_55HITs.csv", header = TRUE)
cowLR_response_pass_pos <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_pos.csv", header = TRUE)
cowLR_response_pass_neg <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_neg.csv", header = TRUE)
cowLR_response_pass_both <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_both.csv", header = TRUE)
expert_response <- read.csv(paste0(answer_dir, "/all_HIT_answer_DW_NV_SB_KI.csv"), header = TRUE)
# load packages
library(ggplot2)
library(lubridate)
library(pdftools)
library("plyr")
library(tidyverse)
library(irr)
library(corrplot)
library(clValid)
library(gridExtra)
library(grid)
source("55HIT_easy_hard_question_assess_helpers.R")
################################################################################
################################ Load Data #####################################
################################################################################
input_dir <- "../results"
answer_dir <- "../../05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts"
output_dir <- "../results"
# read in the worker response data
cowLR_response <- read.csv("../results/cowLR_response_clickWorker_55HITs.csv", header = TRUE)
cowLR_response_pass_pos <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_pos.csv", header = TRUE)
cowLR_response_pass_neg <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_neg.csv", header = TRUE)
cowLR_response_pass_both <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_both.csv", header = TRUE)
expert_response <- read.csv(paste0(answer_dir, "/all_HIT_answer_DW_NV_SB_KI.csv"), header = TRUE)
expert_response <- read.csv(paste0(answer_dir, "/all_HIT_answer_DW_NV_SB_KI.csv"), header = TRUE)
answer_dir
paste0(answer_dir, "/all_HIT_answer_DW_NV_SB_KI.csv"
)
setwd("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/07-Amazon_MTurk_click_worker_response_30cow_pairwise/code")
################################################################################
input_dir <- "../results"
answer_dir <- "../../05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts"
output_dir <- "../results"
# read in the worker response data
cowLR_response <- read.csv("../results/cowLR_response_clickWorker_55HITs.csv", header = TRUE)
cowLR_response_pass_pos <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_pos.csv", header = TRUE)
cowLR_response_pass_neg <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_neg.csv", header = TRUE)
cowLR_response_pass_both <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_both.csv", header = TRUE)
expert_response <- read.csv(paste0(answer_dir, "/all_HIT_answer_DW_NV_SB_KI.csv"), header = TRUE)
library(readr)
all_HIT_answer_DW_NV_SB_KI <- read_csv("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts/all_HIT_answer_DW_NV_SB_KI.csv")
View(all_HIT_answer_DW_NV_SB_KI)
cowLR_response <- all_HIT_answer_DW_NV_SB_KI
library(readr)
cowLR_response_DW_NV_SB_KI <- read_csv("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts/cowLR_response_DW_NV_SB_KI.csv")
View(cowLR_response_DW_NV_SB_KI)
cowlR_expert <- cowLR_response_DW_NV_SB_KI
View(cowlR_expert)
colnames(cowlR_expert)[colnames(cowlR_expert) == "expert"] <- "Worker_id"
################################################################################
################################### cleaning ###################################
################################################################################
# delete those who clicked the same answer across all questions in a HIT
cowLR_response <- delete_worker_answer_same(cowLR_response)
View(cowLR_response)
# read in the worker response data
cowLR_response <- read.csv("../results/cowLR_response_clickWorker_55HITs.csv", header = TRUE)
View(cowLR_response)
View(cowlR_expert)
cowLR_response <- delete_worker_answer_same(cowLR_response)
cowLR_response_pass_pos <- delete_worker_answer_same(cowLR_response_pass_pos)
cowLR_response_pass_neg <- delete_worker_answer_same(cowLR_response_pass_neg)
cowLR_response_pass_both <- delete_worker_answer_same(cowLR_response_pass_both)
################################################################################
################################# All experts ##################################
################################################################################
############## experienced assessor interoserver reliability ###################
expert_dat_reshaped <- reshape(cowlR_expert, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
expert_icc_value <- compute_icc_for_data(expert_dat_reshaped)
# easy and hard questions
results <- seperate_easy_hard_q_reshape(cowlR_expert, expert_response)
expert_response<-all_HIT_answer_DW_NV_SB_KI
# easy and hard questions
results <- seperate_easy_hard_q_reshape(cowlR_expert, expert_response)
expert_easy_reshaped <- results$easy_reshaped
expert_hard_reshaped <- results$hard_reshaped
icc_values_inter_easy <- icc(expert_easy_reshaped[, 3:ncol(expert_easy_reshaped)],model = "twoway", type = "agreement", unit = "single")$value
icc_values_inter_hard <- icc(expert_hard_reshaped[, 3:ncol(expert_hard_reshaped)],model = "twoway", type = "agreement", unit = "single")$value
# inter-click worker ICC
result <- compute_inter_rater_ICC(cowLR_response, delete_same_answer = TRUE)
worker_compare <- result$worker_compare
icc_summary <- result$icc_summary
print(icc_summary)
######## click worker average VS expert average interoserver reliability #######
# get the average response from click worker VS experts
compare_click_worker_expert <- compute_icc_click_worker_expert(cowLR_response, expert_response, "all worker")
# calculate and plot direct_pct
worker_response_summary <- calculate_and_plot_direct_pct(worker_compare, compare_click_worker_expert, "all worker")
setwd("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/08-Lameness_rank_eloSteepness/code")
library(EloRating)
library(EloSteepness)
library(RColorBrewer)
library(irr)
library(viridis)
library(tidyverse)
library(ggforce)
source("eloSteepness_helpers.R")
# load in the data
expert_dir <- "../../05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts/"
winner_loser <- read.csv(paste0(expert_dir, "winner_loser_merged_DW_NV_SB_TM_KI.csv"), header = TRUE, sep = ",")
setwd("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/08-Lameness_rank_eloSteepness/code")
library(EloRating)
library(EloSteepness)
library(RColorBrewer)
library(irr)
library(viridis)
library(tidyverse)
library(ggforce)
source("eloSteepness_helpers.R")
# load in the data
expert_dir <- "../../05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts/"
winner_loser <- read.csv(paste0(expert_dir, "winner_loser_merged_DW_NV_SB_TM_KI.csv"), header = TRUE, sep = ",")
setwd("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/08-Lameness_rank_eloSteepness/code")
# load in the data
expert_dir <- "../../05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts/"
winner_loser <- read.csv(paste0(expert_dir, "winner_loser_merged_DW_NV_SB_KI.csv"), header = TRUE, sep = ",")
winner_loser_no_slip <- winner_loser[-which((winner_loser$winner %in% c(4035)) | (winner_loser$loser %in% c(4035))),]
expert_gs_dir <- "../../03-30cow_GS_label_expert_response/results/"
gs_record <- read.csv(paste0(expert_gs_dir, "gs_response_combined_avg.csv"), header = TRUE, sep = ",")
gs_record2 <- gs_record[, c("Cow", "GS")]
output_dir <- "../results/"
#click_worker_experts <- read.csv(paste0(output_dir, "compare_summary.csv"), header = TRUE, sep = ",")
click_worker_experts <- read.csv(paste0(output_dir, "compare_summary.csv"), header = TRUE, sep = ",")
# replicate row is degree > 1
winner_loser_degree_replct <- replicate_row_df(winner_loser)
################################################################################
############# handle tie by duplicate row and flip winner loser#################
################################################################################
# handle ties: duplicate the rows where degree = 0, 1 row: A wins over B, 2nd row: B wins over A
winn_loser_processed <- swap_winner_loser(winner_loser, FALSE)
View(click_worker_experts)
expert_compare <- click_worker_experts[, c("Cow", "DW_experts_mean", "NV_experts_mean", "SB_experts_mean", "KI_experts_mean")]
View(expert_compare)
gs_expert_compare <- click_worker_experts[, c("Cow", "GS", "NV_DW_SB_KI_experts_mean")]
# Calculate Spearman rank correlation using cor.test
cor_test_result <- cor.test(gs_expert_compare$GS, gs_expert_compare$NV_DW_SB_KI_experts_mean, method = "spearman")
# Print the result
print(cor_test_result)
calculate_scc <- function(var1, var2){
# Calculate Spearman rank correlation using cor.test
cor_test_result <- cor.test(var1, var2, method = "spearman")
# Print the result
print(cor_test_result)
# If you want to extract and print just the correlation coefficient and the p-value
correlation_coefficient <- cor_test_result$estimate
p_value <- cor_test_result$p.value
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("P-value:", p_value, "\n")
}
calculate_scc <- function(var1, var2){
# Calculate Spearman rank correlation using cor.test
cor_test_result <- cor.test(var1, var2, method = "spearman")
# Print the result
print(cor_test_result)
# If you want to extract and print just the correlation coefficient and the p-value
correlation_coefficient <- cor_test_result$estimate
p_value <- cor_test_result$p.value
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("P-value:", p_value, "\n")
}
# Calculate Spearman rank correlation using cor.test
calculate_scc(gs_expert_compare$GS, gs_expert_compare$NV_DW_SB_KI_experts_mean)
# calculate the ICC between experts and click worker for lameness hierarchy
expert_worker_compare <- click_worker_experts[, c("Cow", "all_click_worker_mean", "NV_DW_SB_KI_experts_mean")]
expert_worker_compare <- click_worker_experts[, c("Cow", "all_click_worker_mean", "NV_DW_SB_KI_experts_mean")]
calculate_scc(expert_worker_compare$all_click_worker_mean, expert_worker_compare$NV_DW_SB_KI_experts_mean)
kendalls_tau <- cor(expert_worker_compare$all_click_worker_mean, expert_worker_compare$NV_DW_SB_KI_experts_mean, method = "kendall")
print(kendalls_tau)
install.packages("epiR")
library(epiR)
ccc_result <- epiR::epi.ccc(expert_worker_compare$all_click_worker_mean, expert_worker_compare$NV_DW_SB_KI_experts_mean)
print(ccc_result)

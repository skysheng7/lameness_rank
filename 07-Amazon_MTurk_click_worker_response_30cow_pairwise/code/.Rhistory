library(corrplot)
library(clValid)
library(gridExtra)
library(grid)
source("55HIT_easy_hard_question_assess_helpers.R")
################################################################################
################################ Load Data #####################################
################################################################################
input_dir <- "../results"
answer_dir <- "../../05-Amazon_MTurk_expert_response_30cow_pairwise/results/all_experts"
output_dir <- "../results"
# read in the worker response data
cowLR_response <- read.csv("../results/cowLR_response_clickWorker_55HITs.csv", header = TRUE)
cowLR_response_pass_pos <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_pos.csv", header = TRUE)
cowLR_response_pass_neg <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_neg.csv", header = TRUE)
cowLR_response_pass_both <- read.csv("../results/cowLR_response_clickWorker_55HITs_pass_both.csv", header = TRUE)
expert_response <- read.csv(paste0(answer_dir, "/all_HIT_answer_DW_NV_SB.csv"), header = TRUE)
cowlR_expert <- read.csv(paste0(answer_dir, "/cowLR_response_DW_NV_SB.csv"), header = TRUE)
colnames(cowlR_expert)[colnames(cowlR_expert) == "expert"] <- "Worker_id"
################################################################################
################################### cleaning ###################################
################################################################################
# delete those who clicked the same answer across all questions in a HIT
cowLR_response <- delete_worker_answer_same(cowLR_response)
cowLR_response_pass_pos <- delete_worker_answer_same(cowLR_response_pass_pos)
cowLR_response_pass_neg <- delete_worker_answer_same(cowLR_response_pass_neg)
cowLR_response_pass_both <- delete_worker_answer_same(cowLR_response_pass_both)
################################################################################
################################# All experts ##################################
################################################################################
############## experienced assessor interoserver reliability ###################
expert_dat_reshaped <- reshape(cowlR_expert, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
expert_icc_value <- compute_icc_for_data(expert_dat_reshaped)
# easy and hard questions
cowlR_expert2 <- merge(cowlR_expert, expert_response)
expert_easy <- cowlR_expert2[which(abs(cowlR_expert2$response_mean) >= 1),]
expert_hard <- cowlR_expert2[which(abs(cowlR_expert2$response_mean) < 1),]
expert_easy$response_mean <- NULL
expert_hard$response_mean <- NULL
expert_easy_reshaped <- reshape(expert_easy, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
expert_hard_reshaped <- reshape(expert_hard, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
icc_values_inter_easy <- icc(expert_easy_reshaped[, 3:ncol(expert_easy_reshaped)],model = "twoway", type = "agreement", unit = "single")$value
icc_values_inter_hard <- icc(expert_hard_reshaped[, 3:ncol(expert_hard_reshaped)],model = "twoway", type = "agreement", unit = "single")$value
seperate_easy_hard_q <- function(cowlR_df) {
# easy and hard questions
cowlR_m <- merge(cowlR_df, expert_response)
easy <- cowlR_m[which(abs(cowlR_m$response_mean) >= 1),]
hard <- cowlR_m[which(abs(cowlR_m$response_mean) < 1),]
easy$response_mean <- NULL
hard$response_mean <- NULL
easy_reshaped <- reshape(easy, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
hard_reshaped <- reshape(hard, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
return(list(easy_reshaped = easy_reshaped, hard_reshaped = hard_reshaped))
}
seperate_easy_hard_q <- function(cowlR_df, expert_response) {
# easy and hard questions
cowlR_m <- merge(cowlR_df, expert_response)
easy <- cowlR_m[which(abs(cowlR_m$response_mean) >= 1),]
hard <- cowlR_m[which(abs(cowlR_m$response_mean) < 1),]
easy$response_mean <- NULL
hard$response_mean <- NULL
easy_reshaped <- reshape(easy, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
hard_reshaped <- reshape(hard, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
return(list(easy_reshaped = easy_reshaped, hard_reshaped = hard_reshaped))
}
results <- seperate_easy_hard_q(cowlR_expert, expert_response)
results <- seperate_easy_hard_q(cowlR_expert, expert_response)
expert_easy_reshaped <- results$easy_reshaped
expert_hard_reshaped <- results$hard_reshaped
icc_values_inter_easy <- icc(expert_easy_reshaped[, 3:ncol(expert_easy_reshaped)],model = "twoway", type = "agreement", unit = "single")$value
icc_values_inter_hard <- icc(expert_hard_reshaped[, 3:ncol(expert_hard_reshaped)],model = "twoway", type = "agreement", unit = "single")$value
icc_values_inter_easy
icc_values_inter_hard
View(expert_response)
View(cowLR_response)
seperate_easy_hard_q_reshape <- function(cowlR_df, expert_response) {
# easy and hard questions
temp_result <- seperate_easy_hard_q(cowlR_df, expert_response)
easy<- temp_result$easy
hard<- temp_result$hard
easy_reshaped <- reshape(easy, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
hard_reshaped <- reshape(hard, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
return(list(easy_reshaped = easy_reshaped, hard_reshaped = hard_reshaped))
}
seperate_easy_hard_q <- function(cowlR_df, expert_response) {
# easy and hard questions
cowlR_m <- merge(cowlR_df, expert_response)
easy <- cowlR_m[which(abs(cowlR_m$response_mean) >= 1),]
hard <- cowlR_m[which(abs(cowlR_m$response_mean) < 1),]
easy$response_mean <- NULL
hard$response_mean <- NULL
return(list(easy = easy, hard = hard))
}
# seperate easy and hard question
results <- seperate_easy_hard_q(cowLR_response, expert_response)
cowLR_response_easy <- results$easy
cowLR_response_hard <- results$hard
cowLR_response_easy
cowLR_response_hard
# inter-click worker ICC for easy question
result <- compute_inter_rater_ICC(cowLR_response_easy)
result <- compute_inter_rater_ICC(cowLR_response_easy)
df <- cowLR_response_easy
df <- df[which(df$HIT > 0),]
worker_res <- cowLR_process(df)
worker_res
all_HIT <- unique(worker_res$Task_number)
View(worker_res)
for(i in 1:length(all_HIT)) {
print(i)
cur_HIT <- all_HIT[i]
worker_compare[[i]] <- reshape_worker_responses(worker_res, cur_HIT, delete_NA = TRUE)
icc_value <- compute_icc_for_data(worker_compare[[i]])
allworker_icc <- rbind(allworker_icc, data.frame(HIT = cur_HIT, click_worker_interobserver = icc_value))
}
all_HIT <- unique(worker_res$Task_number)
worker_compare <- list()
allworker_icc <- data.frame()
for(i in 1:length(all_HIT)) {
print(i)
cur_HIT <- all_HIT[i]
worker_compare[[i]] <- reshape_worker_responses(worker_res, cur_HIT, delete_NA = TRUE)
icc_value <- compute_icc_for_data(worker_compare[[i]])
allworker_icc <- rbind(allworker_icc, data.frame(HIT = cur_HIT, click_worker_interobserver = icc_value))
}
i = 8
cur_HIT <- all_HIT[i]
cur_HIT
worker_compare[[i]] <- reshape_worker_responses(worker_res, cur_HIT, delete_NA = TRUE)
all_HIT
length(all_HIT)
cur_HIT
worker_res
dat1 <- worker_res[which(worker_res$Task_number == cur_HIT),]
View(df)
dat1 <- dat1[, c("cow_L", "cow_R", "Worker_id","Answer")]
dat_reshaped <- reshape(dat1, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
bad_cols <- colnames(dat_reshaped)[colSums(is.na(dat_reshaped)) > 0]
bad_cols
delete_NA & (length(bad_cols) > 0)
delete_NA = TRUE
if(delete_NA & (length(bad_cols) > 0)) {
dat_reshaped <- dat_reshaped[, -which(colnames(dat_reshaped) %in% bad_cols)]
}
# Calculate standard deviation for each column while ignoring NA values
sds <- apply(dat_reshaped[, 3:ncol(dat_reshaped)], 2, sd, na.rm = TRUE)
# Filter columns based on standard deviation
filtered_cols <- dat_reshaped[, 3:ncol(dat_reshaped)][, sds != 0]
sds
View(dat_reshaped)
dat1 <- worker_res[which(worker_res$Task_number == cur_HIT),]
dat1 <- dat1[, c("cow_L", "cow_R", "Worker_id","Answer")]
dat_reshaped <- reshape(dat1, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
View(dat1)
dat1 <- worker_res[which(worker_res$Task_number == cur_HIT),]
dat1 <- worker_res[which(worker_res$Task_number == cur_HIT),]
dat1 <- dat1[, c("cow_L", "cow_R", "Worker_id","Answer")]
dat_reshaped <- reshape(dat1, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
for(cur_HIT in all_HIT) {print(cur_HIT)}
# Calculate standard deviation for each column while ignoring NA values
sds <- apply(dat_reshaped[, 3:ncol(dat_reshaped)], 2, sd, na.rm = TRUE)
# Filter columns based on standard deviation
filtered_cols <- dat_reshaped[, 3:ncol(dat_reshaped)][, sds != 0]
dat_reshaped
dat1 <- worker_res[which(worker_res$Task_number == cur_HIT),]
dat1 <- dat1[, c("cow_L", "cow_R", "Worker_id","Answer")]
dat_reshaped <- reshape(dat1, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
dat_reshaped
cur_HIT
cur_HIT <- 45
dat1 <- worker_res[which(worker_res$Task_number == cur_HIT),]
dat1 <- dat1[, c("cow_L", "cow_R", "Worker_id","Answer")]
dat_reshaped <- reshape(dat1, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
bad_cols <- colnames(dat_reshaped)[colSums(is.na(dat_reshaped)) > 0]
if(delete_NA & (length(bad_cols) > 0)) {
dat_reshaped <- dat_reshaped[, -which(colnames(dat_reshaped) %in% bad_cols)]
}
# Calculate standard deviation for each column while ignoring NA values
sds <- apply(dat_reshaped[, 3:ncol(dat_reshaped)], 2, sd, na.rm = TRUE)
sds
reshape_worker_responses <- function(worker_res, cur_HIT, delete_NA, delete_same_answer) {
dat1 <- worker_res[which(worker_res$Task_number == cur_HIT),]
dat1 <- dat1[, c("cow_L", "cow_R", "Worker_id","Answer")]
dat_reshaped <- reshape(dat1, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
bad_cols <- colnames(dat_reshaped)[colSums(is.na(dat_reshaped)) > 0]
if(delete_NA & (length(bad_cols) > 0)) {
dat_reshaped <- dat_reshaped[, -which(colnames(dat_reshaped) %in% bad_cols)]
}
if (delete_same_answer) {
# Calculate standard deviation for each column while ignoring NA values
sds <- apply(dat_reshaped[, 3:ncol(dat_reshaped)], 2, sd, na.rm = TRUE)
# Filter columns based on standard deviation
filtered_cols <- dat_reshaped[, 3:ncol(dat_reshaped)][, sds != 0]
# Combine the first two columns with the filtered columns
result <- cbind(dat_reshaped[, 1:2], filtered_cols)
return(result)
} else {
return(dat_reshaped)
}
}
################################################################################
############## click worker interoserver reliability for each HIT ##############
################################################################################
cowLR_process <- function(df){
worker_res <- df
worker_res$question_num <- paste0("q", worker_res$question_num)
colnames(worker_res) <- c("cow_L", "cow_R", "Q_ID", "Task_number", "Worker_id","Answer" )
return(worker_res)
}
# Filter and reshape the worker responses
reshape_worker_responses <- function(worker_res, cur_HIT, delete_NA, delete_same_answer) {
dat1 <- worker_res[which(worker_res$Task_number == cur_HIT),]
dat1 <- dat1[, c("cow_L", "cow_R", "Worker_id","Answer")]
dat_reshaped <- reshape(dat1, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
bad_cols <- colnames(dat_reshaped)[colSums(is.na(dat_reshaped)) > 0]
if(delete_NA & (length(bad_cols) > 0)) {
dat_reshaped <- dat_reshaped[, -which(colnames(dat_reshaped) %in% bad_cols)]
}
if (delete_same_answer) {
# Calculate standard deviation for each column while ignoring NA values
sds <- apply(dat_reshaped[, 3:ncol(dat_reshaped)], 2, sd, na.rm = TRUE)
# Filter columns based on standard deviation
filtered_cols <- dat_reshaped[, 3:ncol(dat_reshaped)][, sds != 0]
# Combine the first two columns with the filtered columns
result <- cbind(dat_reshaped[, 1:2], filtered_cols)
return(result)
} else {
return(dat_reshaped)
}
}
# Calculate ICC for a given data
compute_icc_for_data <- function(data) {
dat <- data[, 3:ncol(data)]
icc_value = icc(dat, model = "twoway", type = "agreement", unit = "single")$"value"
return(icc_value)
}
# Compute summary statistics
compute_icc_summary <- function(allworker_icc) {
icc_mean <- mean(allworker_icc$click_worker_interobserver)
icc_sd <- sd(allworker_icc$click_worker_interobserver)
icc_min <- min(allworker_icc$click_worker_interobserver)
icc_max <- max(allworker_icc$click_worker_interobserver)
return(list(mean = icc_mean, sd = icc_sd, min = icc_min, max = icc_max))
}
seperate_easy_hard_q_reshape <- function(cowlR_df, expert_response) {
# easy and hard questions
temp_result <- seperate_easy_hard_q(cowlR_df, expert_response)
easy<- temp_result$easy
hard<- temp_result$hard
easy_reshaped <- reshape(easy, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
hard_reshaped <- reshape(hard, idvar = c("cow_L","cow_R"), timevar = "Worker_id", direction = "wide")
return(list(easy_reshaped = easy_reshaped, hard_reshaped = hard_reshaped))
}
seperate_easy_hard_q <- function(cowlR_df, expert_response) {
# easy and hard questions
cowlR_m <- merge(cowlR_df, expert_response)
easy <- cowlR_m[which(abs(cowlR_m$response_mean) >= 1),]
hard <- cowlR_m[which(abs(cowlR_m$response_mean) < 1),]
easy$response_mean <- NULL
hard$response_mean <- NULL
return(list(easy = easy, hard = hard))
}
compute_inter_rater_ICC <- function(df, delete_same_answer) {
df <- df[which(df$HIT > 0),]
worker_res <- cowLR_process(df)
all_HIT <- unique(worker_res$Task_number)
worker_compare <- list()
allworker_icc <- data.frame()
for(i in 1:length(all_HIT)) {
print(i)
cur_HIT <- all_HIT[i]
worker_compare[[i]] <- reshape_worker_responses(worker_res, cur_HIT, delete_NA = TRUE, delete_same_answer)
if (nrow(worker_compare[[i]]) > 1) {
icc_value <- compute_icc_for_data(worker_compare[[i]])
allworker_icc <- rbind(allworker_icc, data.frame(HIT = cur_HIT, click_worker_interobserver = icc_value))
}
}
icc_summary <- compute_icc_summary(allworker_icc)
return(list(worker_compare = worker_compare, icc_summary = icc_summary))
}
directionality_pct <- function(x) {
pos_count <- sum(x > 0)
neg_count <- sum(x < 0)
max_count <- max(pos_count, neg_count)
return(round((max_count / length(x)) * 100, 2))
}
process_dirct_pct <- function(worker_compare) {
# Initialize an empty dataframe to store the results
results_df <- data.frame(cow_L = integer(), cow_R = integer(), dirct_pct = numeric())
# Iterate through each dataframe in the list
for (df in worker_compare) {
# Calculate the directionality percentage for each row
dirct_pct_values <- apply(df[, 3:ncol(df)], 1, directionality_pct)
# Create a temporary dataframe to store the results for the current dataframe
temp_df <- data.frame(cow_L = df$cow_L, cow_R = df$cow_R, dirct_pct = dirct_pct_values)
# Bind the temporary dataframe to the results dataframe
results_df <- rbind(results_df, temp_df)
}
return(results_df)
}
################################################################################
######## click worker average VS expert average interoserver reliability #######
################################################################################
combine_all_response <- function(click_worker_response, expert_response) {
# click worker average
click_worker_avg <- aggregate(click_worker_response$response, by = list(click_worker_response$cow_L, click_worker_response$cow_R), FUN = mean)
colnames(click_worker_avg) <- c("cow_L", "cow_R", "click_worker_avg")
# click worker median
click_worker_median <- aggregate(click_worker_response$response, by = list(click_worker_response$cow_L, click_worker_response$cow_R), FUN = median)
colnames(click_worker_median) <- c("cow_L", "cow_R", "click_worker_median")
# expert average
expert_response <- expert_response[, c("cow_L", "cow_R", "response_mean")]
colnames(expert_response) <- c("cow_L", "cow_R", "expert_avg")
compare_click_worker_expert <- merge(click_worker_avg, expert_response)
return(compare_click_worker_expert)
}
# compute ICC between average click worker and expert
compute_icc_click_worker_expert <- function(click_worker_response, expert_response, cur_title) {
compare_click_worker_expert <- combine_all_response(click_worker_response, expert_response)
compare_click_worker_expert_easy <- compare_click_worker_expert[which(abs(compare_click_worker_expert$expert_avg) >= 1),]
compare_click_worker_expert_hard <- compare_click_worker_expert[which(abs(compare_click_worker_expert$expert_avg) < 1),]
easy_q <- nrow(compare_click_worker_expert_easy)
hard_q <- nrow(compare_click_worker_expert_hard)
icc_values_inter_all <- icc(compare_click_worker_expert[, 3:ncol(compare_click_worker_expert)],model = "twoway", type = "agreement", unit = "single")$value
icc_values_inter_easy <- icc(compare_click_worker_expert_easy[, 3:ncol(compare_click_worker_expert_easy)],model = "twoway", type = "agreement", unit = "single")$value
icc_values_inter_hard <- icc(compare_click_worker_expert_hard[, 3:ncol(compare_click_worker_expert_hard)],model = "twoway", type = "agreement", unit = "single")$value
# Report the results
print(paste("Total number of easy questions:", easy_q))
print(paste("Total number of hard questions:", hard_q))
print(paste("overall ICC between expert avg & click worker avg:", icc_values_inter_all))
print(paste("easy question ICC between expert avg & click worker avg:", icc_values_inter_easy))
print(paste("hard question ICC between expert avg & click worker avg:", icc_values_inter_hard))
p1 <- plot_click_worker_expert(compare_click_worker_expert, cur_title)
print(p1)
return(compare_click_worker_expert)
}
plot_click_worker_expert <- function(df, cur_title) {
p1 <- plot(df$expert_avg,df$click_worker_avg,
ylab="Average worker rating",xlab="Average expert rating",xlim=c(-3,3),ylim=c(-3,3),
pch=19, frame.plot=F, main = cur_title)
return(p1)
}
plot_click_worker_expert_dirct_pct <- function(df, cur_title) {
p1 <- plot(df$expert_avg,df$dirct_pct,
ylab="worker directionaltiy percentage",xlab="Average expert rating",xlim=c(-3,3),ylim=c(0, 100),
pch=19, frame.plot=F, main = cur_title)
return(p1)
}
calculate_and_plot_direct_pct <- function(worker_compare, compare_click_worker_expert, cur_title) {
worker_compare_direct_pct <- process_dirct_pct(worker_compare)
worker_response_summary <- merge(compare_click_worker_expert, worker_compare_direct_pct)
print(plot_click_worker_expert_dirct_pct(worker_response_summary, cur_title))
return(worker_response_summary)
}
compare_click_worker_sd_and_expert_avg <- function(cowLR_response, expert_response) {
click_worker_response_sd <- aggregate(cowLR_response$response, by = list(cowLR_response$cow_L, cowLR_response$cow_R), FUN = sd)
colnames(click_worker_response_sd) <- c("cow_L", "cow_R", "click_worker_sd")
temp_expert <- expert_response[, c("cow_L", "cow_R", "response_mean")]
colnames(temp_expert) <- c("cow_L", "cow_R", "expert_avg")
return(merge(click_worker_response_sd, temp_expert))
}
################################################################################
############################## workers clustering ##############################
################################################################################
cluster_workers <- function(data) {
worker_resp <- data[, 2:length(data)]
rownames(worker_resp) <- data[,1]
worker_resp <- na.exclude(worker_resp)
dist_mat <- dist(worker_resp, method = 'euclidean')
hclust_avg <- hclust(dist_mat, method = "average")
cut_avg <- cutree(hclust_avg, k = mean(dist_mat))
worker_resp_cl <- cbind(worker_resp, cut_avg)
return(worker_resp_cl[which(worker_resp_cl$cut_avg == names(which.max(table(worker_resp_cl$cut_avg)))),])
}
reorientate_df <- function(worker_compare_example) {
cur_df <- worker_compare_example
cur_df$cow_pair <- paste(cur_df$cow_L, cur_df$cow_R, sep = "-")
# Create a long dataframe where each row is a cow_pair, worker_id and answer
long_df <- cur_df %>%
gather(key = "worker_id", value = "answer", starts_with("Answer.")) %>%
select(worker_id, cow_pair, answer)
# Spread the dataframe to wide format where each cow_pair is a column
wide_df <- long_df %>%
spread(key = cow_pair, value = answer)
return(wide_df)
}
cluster_worker <- function(worker_compare) {
worker_compare_list <- list()
for (i in 1:length(worker_compare)) {
cur_worker_compare <- worker_compare[[i]]
# change data orientation
wide_df <- reorientate_df(cur_worker_compare)
# cluster workers together, get worker ID in the bigest cluster
clustered_workers_df = cluster_workers(wide_df)
clustered_workers <- rownames(clustered_workers_df)
after_cluster <- cur_worker_compare[, c("cow_L", "cow_R", clustered_workers)]
worker_compare_list[[i]] <- after_cluster
}
return(worker_compare_list)
}
process_and_combine <- function(df_list) {
# Process each dataframe in the list
processed_list <- lapply(df_list, function(df) {
df$click_worker_avg <- rowMeans(df[, 3:ncol(df)])
return(df[, c("cow_L", "cow_R", "click_worker_avg")])
})
# Combine all the processed dataframes into a master dataframe
master_df <- do.call(rbind, processed_list)
return(master_df)
}
combine_response_cl <- function(df_list, expert_response) {
click_worker_avg_df <- process_and_combine(df_list)
# expert average
expert_response <- expert_response[, c("cow_L", "cow_R", "response_mean")]
colnames(expert_response) <- c("cow_L", "cow_R", "expert_avg")
compare_click_worker_expert <- merge(click_worker_avg_df, expert_response)
return(compare_click_worker_expert)
}
compute_icc_click_worker_expert_cl <- function(df_list, expert_response, cur_title) {
compare_click_worker_expert <- combine_response_cl(df_list, expert_response)
compare_click_worker_expert_easy <- compare_click_worker_expert[which(abs(compare_click_worker_expert$expert_avg) >= 1),]
compare_click_worker_expert_hard <- compare_click_worker_expert[which(abs(compare_click_worker_expert$expert_avg) < 1),]
easy_q <- nrow(compare_click_worker_expert_easy)
hard_q <- nrow(compare_click_worker_expert_hard)
icc_values_inter_all <- icc(compare_click_worker_expert[, 3:ncol(compare_click_worker_expert)],model = "twoway", type = "agreement", unit = "single")$value
icc_values_inter_easy <- icc(compare_click_worker_expert_easy[, 3:ncol(compare_click_worker_expert_easy)],model = "twoway", type = "agreement", unit = "single")$value
icc_values_inter_hard <- icc(compare_click_worker_expert_hard[, 3:ncol(compare_click_worker_expert_hard)],model = "twoway", type = "agreement", unit = "single")$value
# Report the results
print(paste("Total number of easy questions:", easy_q))
print(paste("Total number of hard questions:", hard_q))
print(paste("overall ICC between expert avg & click worker avg:", icc_values_inter_all))
print(paste("easy question ICC between expert avg & click worker avg:", icc_values_inter_easy))
print(paste("hard question ICC between expert avg & click worker avg:", icc_values_inter_hard))
p1 <- plot_click_worker_expert(compare_click_worker_expert, cur_title)
print(p1)
return(compare_click_worker_expert)
}
detect_worker_to_delete <- function(cowLR_input) {
# delete those who clicked the same answer across all questions in a HIT
test_same <- cowLR_input[, c("Worker_id", "HIT", "response")]
test_same_sum <- aggregate(test_same$response, by = list(test_same$Worker_id, test_same$HIT), FUN = sd)
colnames(test_same_sum) <- c("Worker_id", "HIT", "sd")
to_delete <- test_same_sum[which(test_same_sum$sd == 0),]
return(to_delete)
}
delete_worker_answer_same <- function(cowLR_input) {
to_delete <- detect_worker_to_delete(cowLR_input)
if (nrow(to_delete) > 0) {
# update on all cowLR sheets to delete those worker who answered the same across all questions in a HIT
temp <- merge(cowLR_input, to_delete, all = TRUE)
temp <- temp[which(is.na(temp$sd)),]
temp$sd <- NULL
temp <- temp[, c(colnames(cowLR_input))]
return(temp)
} else {
return(cowLR_input)
}
}
# inter-click worker ICC for easy question
result <- compute_inter_rater_ICC(cowLR_response_easy, delete_same_answer = FALSE)
compute_inter_rater_ICC <- function(df, delete_same_answer) {
df <- df[which(df$HIT > 0),]
worker_res <- cowLR_process(df)
all_HIT <- unique(worker_res$Task_number)
worker_compare <- list()
allworker_icc <- data.frame()
for(i in 1:length(all_HIT)) {
cur_HIT <- all_HIT[i]
worker_compare[[i]] <- reshape_worker_responses(worker_res, cur_HIT, delete_NA = TRUE, delete_same_answer)
if (nrow(worker_compare[[i]]) > 1) {
icc_value <- compute_icc_for_data(worker_compare[[i]])
allworker_icc <- rbind(allworker_icc, data.frame(HIT = cur_HIT, click_worker_interobserver = icc_value))
}
}
icc_summary <- compute_icc_summary(allworker_icc)
return(list(worker_compare = worker_compare, icc_summary = icc_summary))
}
worker_compare_easy <- result$worker_compare
icc_summary_easy <- result$icc_summary
print(icc_summary_easy)
worker_compare_easy
icc_summary_easy
# inter-click worker ICC for hard question
result <- compute_inter_rater_ICC(cowLR_response_hard, delete_same_answer = FALSE)
worker_compare_hard <- result$worker_compare
icc_summary_hard <- result$icc_summary
print(icc_summary_hard)
icc_summary_hard
View(worker_compare_easy)
View(worker_compare_easy[[1]])
all_HIT <- sort(unique(worker_res$Task_number))
all_HIT
df <- cowLR_response_easy
delete_same_answer = FALSE
df <- df[which(df$HIT > 0),]
worker_res <- cowLR_process(df)
all_HIT <- sort(unique(worker_res$Task_number))
worker_compare <- list()
allworker_icc <- data.frame()
for(i in 1:length(all_HIT)) {
cur_HIT <- all_HIT[i]
worker_compare[[i]] <- reshape_worker_responses(worker_res, cur_HIT, delete_NA = TRUE, delete_same_answer)
if (nrow(worker_compare[[i]]) > 1) {
icc_value <- compute_icc_for_data(worker_compare[[i]])
allworker_icc <- rbind(allworker_icc, data.frame(HIT = cur_HIT, click_worker_interobserver = icc_value))
}
}
icc_summary <- compute_icc_summary(allworker_icc)
View(worker_compare)
View(worker_compare_easy)
View(worker_compare)
View(allworker_icc)

if (nrow(cur_master_sheet) > 0) {
cur_master_sheet <- cur_master_sheet[order(cur_master_sheet$End),]
prev_end_time <- cur_master_sheet$End[nrow(cur_master_sheet)]
prev_end_weight <- cur_master_sheet$Endweight[nrow(cur_master_sheet)]
feeding_dur <- time_length(as.duration(cur_time - prev_end_time), unit = "second")
replacement_list_by_date[[k]]$interval_from_actor_last_feeding_end_time[j] <- feeding_dur
replacement_list_by_date[[k]]$actor_prev_bin_end_weight[j] <- prev_end_weight
}
}
}
i = 1
k = 1
j = 1
# get the bin numbers at 200 level, after renumbering in previous steps
all_bin <- seq(201, 235, by = 1)  # all bins (water and feed bin list, re-numbered bin sequence)
wat_bin <- c(207, 208, 221, 222, 235) # water bin number
feed_bin <- all_bin[-match(wat_bin, all_bin)] #feed bin number
# get all datasheet for current date
cur_date <- replacement_list_by_date[[k]]$date[1]
cur_feeding_synch_master <- feeding_synch_master_cow3[[as.character(cur_date)]]
cur_feeding_bin_master <- feeding_synch_master_bin3[[as.character(cur_date)]]
cur_feeding_feed_master <- feeding_synch_master_feed3[[as.character(cur_date)]]
colnames(cur_feeding_feed_master) <- c("Time", feed_bin, "date", "totalFeed") # change feed bin numbers to be 200-levek renumbered format
cur_visited_but_no_feed <- visited_but_no_feed_record[[as.character(cur_date)]]
cur_feeding_drinking_bin_master <- feed_drink_synch_master_bin3[[as.character(cur_date)]]
print(paste(k,j))
cur_time <- ymd_hms(replacement_list_by_date[[k]]$Time[j], tz="America/Los_Angeles")
cur_bin_num <- replacement_list_by_date[[k]]$Bin[j]
#update feed bin number
if (cur_bin_num <= 6) {
cur_bin_num_renumber <-  (cur_bin_num + 200)
} else if (cur_bin_num <= 18) {
cur_bin_num_renumber <- (cur_bin_num + 202)
} else if (cur_bin_num <= 30) {
cur_bin_num_renumber <- (cur_bin_num + 204)
}
# check aliby for actor cow Step 1
cur_actor <- replacement_list_by_date[[k]]$Actor_cow[j]
actor_cow_occupied_bin <- cur_feeding_drinking_bin_master[which(cur_feeding_drinking_bin_master$Time == cur_time), ][1, as.character(cur_actor)]
if (actor_cow_occupied_bin > 0) {
replacement_list_by_date[[k]]$actor_at_another_bin[j] <- 1
}
# <2> Total available feed
# occupied bin number list
occupied_bin_list <- unique(unname(unlist(cur_feeding_bin_master[
which(cur_feeding_bin_master$Time == cur_time), ][1, 2:(ncol(cur_feeding_bin_master) - 1)])))
occupied_bin_list <- sort(occupied_bin_list[occupied_bin_list>0])
# calculate the total amount of feed that is occupied by all cows
occupied_feed <- 0
cur_feed_row <- cur_feeding_feed_master[which(cur_feeding_feed_master$Time == cur_time), ][1, ]
for (u in 1:length(occupied_bin_list)) {
o_bin <- occupied_bin_list[u]
index_bin <- o_bin + 1
occupied_feed <- occupied_feed + cur_feed_row[1, index_bin]
}
# record total avaialble feed right now
available_feed <- cur_feed_row$totalFeed[1] - occupied_feed
replacement_list_by_date[[k]]$total_feed_in_available_bin[j] <- available_feed
# <1> available bin number for current time
replacement_list_by_date[[k]]$available_feed_bin_num[j] <- 30 - length(occupied_bin_list)
View(replacement_list_by_date)
View(replacement_list_by_date[["2020-11-02"]])
# <3> Necessary replacement: if there is no other bin avaialble, or all available feed <= 0.5, then it's necessary replacement
if ((replacement_list_by_date[[k]]$available_feed_bin_num[j] == 0) | (replacement_list_by_date[[k]]$total_feed_in_available_bin[j] <= 0.5)) {
replacement_list_by_date[[k]]$neccessary_replacement[j] <- "YES"
}
(replacement_list_by_date[[k]]$available_feed_bin_num[j] == 0)
available_feed
View(cur_day_visit)
View(cur_feed_row)
View(cur_feeding_feed_master)
occupied_feed
View(feeding_synch_master_feed3)
View(feeding_synch_master_feed3[["2020-11-02"]])
View(feed_drink_synch_master_cow2)
View(feeding_synch_master_feed2)
?rowSums
View(feeding_synch_master_feed2)
# add a new column calculating the total feed in all bins right now
feeding_synch_master_feed2$totalFeed <- rowSums(feeding_synch_master_feed2[, 2: (total_bin+1)], na.rm = TRUE)
load("C:/Users/skysheng/OneDrive - The University Of British Columbia/UNIVER~1/Research/PHDPRO~1/LAMENE~1/SUPERC~1/HOBO_I~1/result/HOBO_I~1/HOBO/SYNCHR~3.RDA")
View(synchronized_lying_analysis_by_cow)
load("C:/Users/skysheng/OneDrive - The University Of British Columbia/UNIVER~1/Research/PHDPRO~1/LAMENE~1/SUPERC~1/HOBO_I~1/result/HOBO_I~1/HOBO/SYNCHR~1.RDA")
View(synchronized_lying_avergae_duration)
test <-synchronized_lying_avergae_duration[["2020-07-13"]]
View(test)
load("C:/Users/skysheng/OneDrive - The University Of British Columbia/University of British Columbia/Research/PhD Project/Lameness one year trial/Super Computer Computation/hobo_insentec_round6/result/HOBO_insentec_milking/HOBO/cleaned_HOBO_raw_data_in_minutes.Rda")
View(cleaned_HOBO_raw_data_in_minutes)
library(lubridate)
master <- cleaned_HOBO_raw_data_in_minutes
master$ST = 0
master$ST[which(master$y<2.55)] <- 1
# delete all columns that are not useful for lying synch analysis
master_lying_synch <- master
# only keep the lying info
master_lying_synch <- master_lying_synch[which(master_lying_synch$ST == 0),]
# seperate each sheet grouped by cowID, all seperated sheets go into a list
master_list <- list()
cow_list <- sort(unique(master_lying_synch$Cow))
for (i in 1:length(cow_list)) {
cur_cow <- cow_list[i]
master_list[[i]] <- master_lying_synch[which(master_lying_synch$Cow == cur_cow),]
master_list[[i]]$Cow = NULL # delete this column
colnames(master_list[[i]]) <- c("dateTime", "date", cur_cow)
master_list[[i]][, 3] <- 1
}
# merge all seperate sheet in the master_list into one gaint sheet
# create an empty datasheet
master_lying_synch2 <- master_list[[1]]
for (j in 2:length(master_list)) {
master_lying_synch2 <- merge(master_lying_synch2, master_list[[j]], all = TRUE)
}
master_lying_synch2[is.na(master_lying_synch2)] <- 0 # replace NA with 0
master_lying_synch2 <- master_lying_synch2[order(master_lying_synch2$dateTime), ] # sort the datasheet
master_lying_synch2$total_cow <- rowSums(master_lying_synch2[, 3:ncol(master_lying_synch2)], na.rm = TRUE)
# we only care about the minutes when more than 1 cow is lying
master_lying_synch3 <- master_lying_synch2[which(master_lying_synch2$total_cow > 1),]
# merge all seperate sheet in the master_list into one gaint sheet
# create an empty datasheet
master_lying_synch2 <- master_list[[1]]
length(master_list)
unique(master_lying_synch$Cow)
# merge all seperate sheet in the master_list into one gaint sheet
# create an empty datasheet
master_lying_synch2 <- master_list[[1]]
for (j in 2:length(master_list)) {
master_lying_synch2 <- merge(master_lying_synch2, master_list[[j]], all = TRUE)
}
j = 2
View(master_lying_synch2)
View(master_list)
View(master_list[[2]])
library(lubridate)
load("C:/Users/skysheng/OneDrive - The University Of British Columbia/University of British Columbia/Research/PhD Project/Lameness one year trial/Super Computer Computation/hobo_insentec_round6/result/HOBO_insentec_milking/HOBO/cleaned_HOBO_raw_data_in_minutes.Rda")
master <- cleaned_HOBO_raw_data_in_minutes
master$ST = 0
master$ST[which(master$y<2.55)] <- 1
# delete all columns that are not useful for lying synch analysis
master_lying_synch <- master
# only keep the lying info
master_lying_synch <- master_lying_synch[which(master_lying_synch$ST == 0),]
colnames(master_lying_synch)
master_lying_synch <- master_lying_synch[, c("dateTime", "date", "Cow")]
# seperate each sheet grouped by cowID, all seperated sheets go into a list
master_list <- list()
cow_list <- sort(unique(master_lying_synch$Cow))
for (i in 1:length(cow_list)) {
cur_cow <- cow_list[i]
master_list[[i]] <- master_lying_synch[which(master_lying_synch$Cow == cur_cow),]
master_list[[i]]$Cow = NULL # delete this column
colnames(master_list[[i]]) <- c("dateTime", "date", cur_cow)
master_list[[i]][, 3] <- 1
}
View(master_lying_synch)
# seperate each sheet grouped by cowID, all seperated sheets go into a list
master_list <- list()
cow_list <- sort(unique(master_lying_synch$Cow))
i =1
cur_cow <- cow_list[i]
master_list[[i]] <- master_lying_synch[which(master_lying_synch$Cow == cur_cow),]
View(master)
cur_cow <- cow_list[i]
master_list[[i]] <- master_lying_synch[which(master_lying_synch$Cow == cur_cow),]
colnames(master_list[[i]])[colnames(master_list[[i]]) == "Cow"] <- cur_cow
master_list[[i]][, 3] <- 1
View(master_list)
View(master_list[[1]])
View(master_list[[1]])
library(lubridate)
load("C:/Users/skysheng/OneDrive - The University Of British Columbia/University of British Columbia/Research/PhD Project/Lameness one year trial/Super Computer Computation/hobo_insentec_round6/result/HOBO_insentec_milking/HOBO/cleaned_HOBO_raw_data_in_minutes.Rda")
master <- cleaned_HOBO_raw_data_in_minutes
master$ST = 0
master$ST[which(master$y<2.55)] <- 1
# delete all columns that are not useful for lying synch analysis
master_lying_synch <- master
# only keep the lying info
master_lying_synch <- master_lying_synch[which(master_lying_synch$ST == 0),]
master_lying_synch <- master_lying_synch[, c("dateTime", "date", "Cow")]
# seperate each sheet grouped by cowID, all seperated sheets go into a list
master_list <- list()
cow_list <- sort(unique(master_lying_synch$Cow))
R.version
#load packages and data
library(ggplot2)
library(lubridate)
library(EloRating)
library(tidyr)
library(dplyr)
library(viridis)
library(car)
library(corrplot)
library(EloSteepness)
load("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/08-Lameness_rank_eloSteepness/results/milestone_worker_num_ICC_change.rdata")
View(correlation_change_df)
setwd("C:/Users/skysheng/OneDrive - The University Of British Columbia/R package project and Git/lameness_rank/03-30cow_GS_label_expert_response/code")
library(lubridate)
library(irr)
source("combine_5experts_rating_helper.R")
gs_p1 <- read.csv("../results/gs_response_Aug-12-2023.csv", header = TRUE)
gs_p2 <- read.csv("../results/gs_response_Wali_Jul-10-2023.csv", header = TRUE)
gs_p3 <- read.csv("../results/gs_response_Wali_Jul-14-2023.csv", header = TRUE)
gs_p4 <- read.csv("../results/gs_response_Wali_Jul-18-2023.csv", header = TRUE)
gs_p5 <- read.csv("../results/gs_response_Sep-10-2023.csv", header = TRUE)
gs <- rbind(gs_p1, gs_p2)
gs <- rbind(gs, gs_p3)
gs <- rbind(gs, gs_p4)
gs <- rbind(gs, gs_p5)
# remove worker "SB" as she used a different lameness assessment method than the other workers
gs <- gs[which(gs$Worker_id != "SB"),]
######################## GS average processing #################################
# take the avearge across all experts for each cow
gs_avg <- aggregate(gs$GS, by = list(gs$Cow), FUN = mean)
colnames(gs_avg) <- c("Cow", "GS")
###################### intraobserver reliability ###############################
# you can only calculate intraobserver reliability if the expert answered >=2 times
temp <- gs[which(gs$Cow == 4008),]
expert_retain <- unique(temp$Worker_id[duplicated(temp$Worker_id)])
gs_retain <- gs[which(gs$Worker_id %in% expert_retain),]
gs_retain <- gs_retain[, c("Cow", "Worker_id", "GS_round", "GS")]
# calculate intraobserver reliability using iCC
# Get the unique worker IDs
workers <- unique(gs_retain$Worker_id)
# Initialize an empty vector to store the ICC for each worker
icc_values <- numeric(length(workers))
# Loop over each unique worker
for (i in seq_along(workers)) {
# Subset the data for the current worker
worker_data <- gs_retain[gs_retain$Worker_id == workers[i], ]
# Reshape the data to wide format, with one row per cow and one column per observation
worker_data_wide <- reshape(worker_data, idvar = c("Worker_id", "Cow"), timevar = "GS_round", direction = "wide")
# Calculate the ICC for the current worker
icc_result <- icc(worker_data_wide[, 3:ncol(worker_data_wide)],model = "twoway", type = "agreement", unit = "single")
# Store the ICC value
icc_values[i] <- icc_result$value
}
# Combine the worker IDs and ICC values into a data frame
icc_df <- data.frame(Worker_id = workers, ICC = icc_values)
icc_mean <- mean(icc_df$ICC)
icc_sd <- sd(icc_df$ICC)
### interobserver reliability calculated independetly for each of the 3 rounds##
inter_ICC_by_rounds <- interobserver_ICC_per_round_df(gs)
mean(inter_ICC_by_rounds$interobserver_ICC)
sd(inter_ICC_by_rounds$interobserver_ICC)
################# average scores from 3 rounds for each expert #################
######################## then calculate interobserver ##########################
score_avg_by_expert <- aggregate(gs$GS, by = list(gs$Cow, gs$Worker_id), FUN = mean)
colnames(score_avg_by_expert) <- c("Cow", "Worker_id", "GS")
inter_ICC_by_avg_score <- interobserver_ICC_per_round(score_avg_by_expert)
## progressively sample 1 to 4 assessors, and 1 to 3 rounds from full dataset ##
##### compare the agreement between average of subsampled score and avergae ####
################# from full set of 5 assessor & 3 rounds #######################
cor_change_df <- spearman_change_rounds_expert_num(gs)
cor_se_df <- aggregate(cor_change_df$cor_subsample_with_full, by = list(cor_change_df$num_of_experts, cor_change_df$num_of_rounds), FUN = standard_error)
colnames(cor_se_df) <- c("num_of_experts", "num_of_rounds", "cor_SE")
cor_mean_df <- aggregate(cor_change_df$cor_subsample_with_full, by = list(cor_change_df$num_of_experts, cor_change_df$num_of_rounds), FUN = mean)
colnames(cor_mean_df) <- c("num_of_experts", "num_of_rounds", "cor_mean")
cor_mean_se_df <- merge(cor_mean_df, cor_se_df)
cor_mean_se_df <- cor_mean_se_df[-which((cor_mean_se_df$num_of_experts == 5) & (cor_mean_se_df$num_of_rounds == 3)),]
# plot the cor_mean_se_df
library(ggplot2)
warnings()
# plot the cor_mean_se_df
# Convert num_of_rounds to a factor
cor_mean_se_df$num_of_rounds_factor <- factor(cor_mean_se_df$num_of_rounds)
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = paste0(expression(r[s]), " between subsampled \nand complete responses"),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Save the plot
ggsave("../plots/cor_change_by_round_expert_num.png", plot = cor_plot, width = 15, height = 13, limitsize = FALSE)
expression(r[s])
as.charater(expression(r[s]))
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = bquote("between subsampled and complete responses" ~ .(r[s])),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = expression(r[s]),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Save the plot
ggsave("../plots/cor_change_by_round_expert_num.png", plot = cor_plot, width = 15, height = 13, limitsize = FALSE)
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = expression(paste0(r[s], " between subsampled \nand complete responses")),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Save the plot
ggsave("../plots/cor_change_by_round_expert_num.png", plot = cor_plot, width = 15, height = 13, limitsize = FALSE)
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = expression(paste(r[s], " between subsampled \nand complete responses")),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Save the plot
ggsave("../plots/cor_change_by_round_expert_num.png", plot = cor_plot, width = 15, height = 13, limitsize = FALSE)
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = expression(paste(r[s], " between subsampled and complete responses")),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Save the plot
ggsave("../plots/cor_change_by_round_expert_num.png", plot = cor_plot, width = 15, height = 13, limitsize = FALSE)
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = expression(paste(r[s], "between subsampled", "\nand complete responses")),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = expression(paste(r[s], "between subsampled", "\nand complete responses")),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Save the plot
ggsave("../plots/cor_change_by_round_expert_num.png", plot = cor_plot, width = 15, height = 13, limitsize = FALSE)
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = expression(paste(r[s], " between subsampled ", "\nand complete responses")),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Save the plot
ggsave("../plots/cor_change_by_round_expert_num.png", plot = cor_plot, width = 15, height = 13, limitsize = FALSE)
# Create a ggplot
cor_plot <- ggplot(cor_mean_se_df, aes(x = num_of_experts, y = cor_mean)) +
geom_point(aes(size = num_of_rounds_factor, color = num_of_rounds_factor, alpha = 0.9)) + # Added alpha for transparency
geom_errorbar(aes(ymin = cor_mean - cor_SE, ymax = cor_mean + cor_SE, width = 0.2)) + # Added geom_errorbar for SE error bars
scale_size_manual(values = c(`1` = 10, `2` = 15, `3` = 20)) +
scale_color_manual(values = c(`1` = "lightblue", `2` = "dodgerblue", `3` = "darkblue")) +
labs(
x = "Number of assessors",
y = expression(atop(paste(r[s], " between subsampled"), "and complete responses")),
size = "Number \nof rounds",
color = "Number \nof rounds"
) +
guides(
color = guide_legend(override.aes = list(size = c(10, 15, 20), alpha = 0.7)),
size = "none",  # hide the size legend
alpha = "none"  # hide the alpha legend
) +
theme_classic() +
theme(
text = element_text(size = 50),
axis.text.x = element_text(size = 50)
) +
scale_y_continuous(limits = c(0.5, 1), expand = expansion(mult = c(0, .1)))  # Set y-axis limits
# Save the plot
ggsave("../plots/cor_change_by_round_expert_num.png", plot = cor_plot, width = 15, height = 13, limitsize = FALSE)
